%h2.title
  %a{:href => course_path(@assignment.course)}=h @assignment.course.name 
  = ' &gt; Assignment #'  + @assignment.position.to_s

%ol.timeline
  - @assignment.configured_modules(@user).each do |m|
    - if !m.informational?
      - if m == @assignment.current_module(@user)
        %li.current= m.name
      - else
        %li= m.name
  - if @assignment.has_messaging?(@user)
    - content_for :user_options do
      %li
        %a{:href => assignment_messages_path(@assignment), :target => "_new"} Messages

- if !@assignment.current_module(@user).nil?
  - if @assignment.current_module(@user).position != 1 && !@assignment.is_participant?(@user)
    %p
      You missed the initial module that establishes your participation
      in this assignment.  Please contact your professor.
  - else
    - if !@assignment.current_module(@user).has_messaging? && !@assignment.current_module(@user).is_evaluation
      #instructions
        = markdown @assignment.current_module(@user).instructions

    - if @assignment.current_module(@user).has_messaging?
      - if !@assignment.current_module(@user).instructions.blank?
        #instructions{:class => 'x-hidden'}
          = markdown(@assignment.current_module(@user).instructions)
      %p
        This module ends in
        = distance_of_time_in_words(@assignment.current_module(@user).ends_at, @assignment.course.now) + "."
        - if !@assignment.current_module(@user).instructions.blank?
          There are
          %a.popup{:href=>"#instructions", :title => 'Instructions'} instructions for this module.
      #message-container
      :javascript
        Ext.onReady(function(){
          var p = new Ext.Panel({
            renderTo: 'message-container',
            autoHeight: true,
            border: false,
            /* title: #{(@assignment.current_module(@user).name + ' Messages').to_json}, */
            autoLoad: {
              url: #{(assignment_messages_path(@assignment)+"?embedded=1").to_json},
              scripts: true
            }
          });
        });
    - elsif @assignment.current_module(@user).is_evaluation
      #instructions{:class => 'x-hidden'}
        %p
          Here is a series of evaluations for this assignment.  These
          evaluations are grouped by their associated module.  In each
          evaluation, you are evaluating a different student, even if the
          title is the same.  If the title is the same, the evaluation is
          for someone in a different assignment module.

        %p
          You need to submit each evaluation separately by clicking on the
          "Submit ... Evaluation" button.  When you successfully submit an
          evaluation, that evaluation will close indicating that you have
          already completed that evaluation.

        %p
          When you have finished the evaluations, you have completed this
          assignment.  

        %p
          You may go back and change any of your answers until the evaluation
          period is over.  To change your answers, open up the evaluation and
          select different answers.  Then submit the evaluation as you did
          before.
      %p
        You have 
        = distance_of_time_in_words(@assignment.current_module(@user).ends_at, @assignment.course.now)
        to complete these evaluations.
        There are
        %a.popup{:href => '#instructions', :title => 'Instructions'} instructions for this module.


      = render :partial => 'evaluation', :collection => @assignment.configured_modules(@user).select{ |cm| cm.has_evaluation? }
      - if !@assignment.author_eval.nil? && !@assignment.author_eval.empty?
        = render :partial => 'evaluation_form', :locals => {:info => {:id => 'self-eval', :eval => @assignment.author_eval, :values => @assignment.assignment_submission(@user).author_eval, :portfolio => @assignment.assignment_submission(@user).show_info(@assignment.configured_modules(@user).last.position, @user) }, :form_url => assignment_author_eval_path(@assignment), :form_title => 'Self Evaluation' }
    - else
      = render :partial => 'participation', :collection => @assignment.current_module(@user).assignment_participations
- elsif @assignment.starts_at > @assignment.course.now
  %p
    This assignment is not yet available.
    The first module will become available in
    = distance_of_time_in_words(@assignment.starts_at, @assignment.course.now) + '.'
- elsif ( @assignment.scores_final? rescue false )
  #score
    %p We are working on making your score available.
- else
  %p
    This assignment has closed.
