%h2.title
  %a{:href => course_path(@assignment.course)}=h @assignment.course.name 
  = ' &gt; Assignment #'  + @assignment.position.to_s

%ol.timeline
  - @assignment.configured_modules(@user).each do |m|
    - if !m.informational?
      - if m == @assignment.current_module(@user)
        %li.current= m.name
      - else
        %li= m.name
  - if @assignment.has_messaging?(@user)
    %li{:style => 'float: right; border-left: none' }
      %a{:href => assignment_messages_path(@assignment), :target => "_new"} Messages

- if !@assignment.current_module(@user).nil?
  - if @assignment.current_module(@user).position != 1 && !@assignment.is_participant?(@user)
    %p
      You missed the initial module that establishes your participation
      in this assignment.  Please contact your professor.
  - else
    - if !@assignment.current_module(@user).has_messaging?
      #instructions
        = markdown @assignment.current_module(@user).instructions

    - if @assignment.current_module(@user).has_messaging?
      %p
        This module ends in
        = distance_of_time_in_words(@assignment.current_module(@user).ends_at, @assignment.course.now) + "."
      #message-container
      :javascript
        Ext.onReady(function(){
          var p = new Ext.TabPanel({
            renderTo: 'message-container',
            activeTab: 0,
            autoHeight: true,
            xtype: 'tabpanel',
            items: [{
              title: 'Instructions',
              autoScroll: true,
              html: #{('<div id="instructions">' + markdown(@assignment.current_module(@user).instructions) + '</div>').to_json}
            }, {
              title: #{(@assignment.current_module(@user).name + ' Messages').to_json},
              autoHeight: true,
              autoLoad: {
                url: #{(assignment_messages_path(@assignment)+"?embedded=1").to_json},
                scripts: true
              }
            }]
          });
          p.setActiveTab(#{(@assignment.current_module(@user).has_messages? ? 1 : 0).to_json});
        });
    - elsif @assignment.current_module(@user).is_evaluation
      #instructions
        You have 
        = distance_of_time_in_words(@assignment.current_module(@user).ends_at, @assignment.course.now)
        to complete this evaluation.

      = render :partial => 'evaluation', :collection => @assignment.configured_modules(@user).select{ |cm| cm.has_evaluation? }
      - if !@assignment.author_eval.nil? && !@assignment.author_eval.empty?
        = render :partial => 'evaluation_form', :locals => {:info => {:id => 'self-eval', :eval => @assignment.author_eval, :values => @assignment.assignment_submission(@user).author_eval, :portfolio => @assignment.assignment_submission(@user).show_info(@assignment.configured_modules(@user).last.position, @user) }, :form_url => assignment_author_eval_path(@assignment), :form_title => 'Self Evaluation' }
    - else
      = render :partial => 'participation', :collection => @assignment.current_module(@user).assignment_participations
- elsif @assignment.starts_at > @assignment.course.now
  %p
    This assignment is not yet available.
    The first module will become available in
    = distance_of_time_in_words(@assignment.starts_at, @assignment.course.now) + '.'
- elsif !@assignment.score_view.blank?
  #score= (markdown @assignment.view_scores(@user) rescue '')
- else
  %p
    This assignment has closed.
