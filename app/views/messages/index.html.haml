#message-panel
- tabs = [ { :title => 'You', :html => @current_module.assignment_submission.show_info(@current_module.position, @user), :itemId => 'own-portfolio' } ]
- @assignment_participations.each do |p|
  - next if p.author_name.blank?
  - tabs << { :title => p.author_name, :html => p.assignment_submission.show_info(@current_module.position,@user), :itemId => 'portfolio-' + p.id.to_s }

:javascript
  Ext.onReady(function(){
  var message_panel_tools = new Array;
  if(#{ @we_allow_new_messages.to_json }) {
    message_panel_tools[0] = {
      id: 'refresh',
      qtip: 'Refresh Message List',
      handler: function(e,toolEl,panel,tc) {
        panel.getStore().reload();
      }
    };

    if(#{@recipients.size} > 0) {
      message_panel_tools[1] = {
        id: 'plus',
        qtip: 'Send Message',
        handler: function(e,toolEl,panel,tc) {
           WLC.debug("Sending message");
           var compose_form = new Ext.Window({
             title: 'New Message',
             renderTo: document.body,
             floating: true,
             tools: [{
               id: 'close',
               handler: function(e,toolEl,panel,tc) {
                 panel.destroy();
               }
             }],
             items: [{
               xtype: 'form',
               buttonAlign: 'center',
               margins: {
                 left: 5,
                 top: 5
               },
               width: 500,
               buttons: [{
                 text: 'Send Message',
                 type: 'submit',
                 handler: function(f) {
                   var fp = this.ownerCt.ownerCt;
                   WLC.debug(this);
                   WLC.debug(this.ownerCt);
                   WLC.debug(fp);
                   var form = fp.getForm();
                   if(form.isValid()) {
                     form.submit({
                       url: #{(assignment_messages_path(@assignment)+"?format=ext_json").to_json},
                       success: function() {
                         panel.getStore().reload();
                         compose_form.destroy();
                       }
                     });
                   }
                 }
               }, {
                 text: 'Reset',
                 type: 'reset',
                 handler: function(f) {
                   var fp = this.ownerCt.ownerCt;
                   var form = fp.getForm();
                   form.reset();
                 }
               }, {
                 text: 'Cancel',
                 type: 'submit',
                 handler: function(f) {
                   compose_form.destroy();
                 }
               }],
               items: [{
                 fieldLabel: 'To',
                 xtype: 'combo',
                 mode: 'local',
                 editable: true,
                 triggerAction: 'all',
                 forceSelection: true,
                 typeAhead: true,
                 lazyRender: true,
                 emptyText: "Who will get this message?",
                 store: new Ext.data.ArrayStore({
                   id: 0,
                   fields: [
                     'myId',
                     'displayText'
                   ],
                   data: #{@recipients.to_json}
                 }),
                 valueField: 'myId',
                 displayField: 'displayText',
                 hiddenName: 'assignment_participation_id'
               }, {
                 fieldLabel: 'Subject',
                 width: 350,
                 xtype: 'textfield',
                 emptyText: "What is this message about?",
                 name: 'subject',
                 inputType: 'text'
               }, {
                 fieldLabel: 'Content',
                 xtype: 'textarea',
                 width: 350,
                 emptyText: "What do you want to tell them?",
                 height: 300,
                 name: 'content'
               }, {
                 inputType: 'hidden',
                 xtype: 'field',
                 name: 'authenticity_token',
                 value: #{form_authenticity_token.to_json}            
               }]
             }]
           });
           compose_form.setPosition(50,50);
           compose_form.show();
        }
      };
    }
  }

  var dims = document.viewport.getDimensions();
  var h = dims['height'];
  var w = dims['width'];
  var message_panel;
  var message_store = new Ext.data.JsonStore({
    url: #{(assignment_messages_path(@assignment)+"?format=ext_json").to_json},
    autoLoad: true,
    storeId: 'messageStore',
    root: 'messages',
    idProperty: 'id',
    restful: true,
    fields: ['id', 'user', 'created_at', {name:'is_read', type:'boolean'}, 'subject', 'recipient', 'recipient-portfolio' ]
  });

  if( #{@we_allow_new_messages.to_json} ) {
    Ext.TaskMgr.start({
      run: function(){ message_store.reload() },
      interval: 10*60*1000 /* every 10 minutes */
    });
  }

  message_panel = new Ext.Panel({
      renderTo: 'message-panel',
      layout:'border',
      height: h - 165,
      width: w,
      items: [{
        region: 'north',
        layout: 'hbox',
        align: 'stretchmax',
        pack: 'center',
        flex: 1,
        height: 150,
        items: [{
          title: 'Messages',
          flex: 1,
          xtype: 'grid',
          tools: message_panel_tools,
          height: 150,
          store: message_store,
          colModel: new Ext.grid.ColumnModel({
            defaults: {
              sortable: true
            },
            columns: [
              {id: 'subject', header: 'Subject', dataIndex: 'subject', width: (w*.5-35)*.5 },
              {id: 'sent_from', header: 'From', dataIndex: 'user' , width: (w*.5-35)*.2 },
              {id: 'sent_to', header: 'To', dataIndex: 'recipient' , width: (w*.5-35)*.2 },
              {id: 'when', header: 'Date', dataIndex: 'created_at', width: (w*.5-35)*.2 }
            ]
          }),
          autoFill: true,
          forceFit: true,
          selModel: new Ext.grid.RowSelectionModel({
            singleSelect: true,
          }),
          viewConfig: {
            getRowClass: function(record, index) {
                var c = record.get('is_read');
                if(c) { return 'message-read'; } else { return 'message-unread'; }
            },
            forceFit: true
          },
          listeners: {
            beforerefresh: function(v) {
               v.scrollTop = v.scroller.dom.scrollTop;
               v.scrollHeight = v.scroller.dom.scrollHeight;
            },
            refresh: function(v) {
               v.scroller.dom.scrollTop = v.scrollTop + 
                (v.scrollTop == 0 ? 0 : v.scroller.dom.scrollHeight - v.scrollHeight);
            },
            rowclick: function(grid, index, e) {
              var panel = message_panel.getComponent('message-content-panel');
              var store = grid.getStore();
              var rec = store.getAt(index);
              panel.load({
                url: '/messages/' + rec.get('id'),
                scripts: true
              });
              /* mark record as read, and select appropriate portfolio tab */
              if(! rec.get('is_read')) {
                rec.set('is_read', true);
                grid.getView().refreshRow(rec);
              }

              WLC.debug(rec);
              WLC.debug("Setting active tab to: " + rec.get('recipient-portfolio'));
              message_panel.layout.north.panel.getComponent('message-portfolios').setActiveTab(rec.get('recipient-portfolio'));
            }
          },
          onLoad: Ext.emptyFn
        }, {
          title: 'Portfolios',
          xtype: 'tabpanel',
          flex: 1,
          itemId: 'message-portfolios',
          height: 150,
          activeItem: 0,
          items:#{tabs.to_json}
      }]
      }, {
        region: 'center',
        itemId: 'message-content-panel',
        autoScroll: true,
        html: '<p>The message content will go here.</p>'
      }]
  });
  });
